#!/usr/bin/env luajit

package.path = package.path .. ";../../src/?.lua"

local ffi = require("ffi")
local pf = require("pf")
local utils = require("pf.utils")
local savefile = require("pf.savefile")

local function usage()
   print([[
Usage: pflua-pipelines-match IN.PCAP FILTER PKT_NUMBER
   IN.PCAP     Input file in .pcap format.
   FILTER      Filter to apply, as a string or file.
   PKT_NUMBER  Check if the pipelines match on the specified packet
   ]])
   os.exit(false)
end

local function filter(packets, pflua_pred, bpf_pred, pkt_number)
   local pkt = packets[pkt_number]
   local res = pflua_pred(pkt.packet, pkt.len) == bpf_pred(pkt.packet, pkt.len)
   local verbose = os.getenv("PF_VERBOSE")
   if verbose then
      if res then
         print("The pipelines matched.")
      else
        print("The pipelines diverged.")
      end
   end
   return res
end

function main(in_file, filter_input, pkt_number)
   local packets = savefile.load_packets(in_file)
   local pflua_pred = pf.compile_filter(filter_input)
   local bpf_pred = pf.compile_filter(filter_input, { bpf = true })
   os.exit(filter(packets, pflua_pred, bpf_pred, pkt_number))
end

-- Parse args
local in_file, filter_str, pkt_number = arg[1], arg[2], arg[3]
if not pkt_number then usage() end

main(in_file, filter_str, tonumber(pkt_number))
