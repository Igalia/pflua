#!/usr/bin/env luajit
-- -*- lua -*-

package.path = package.path .. ";../src/?.lua"

local pf = require("pf")
local bpf = require("pf.bpf")
local match = require("pf.match")
local utils = require("pf.utils")
local anf = require("pf.anf")
local ssa = require("pf.ssa")

function usage()
   local content = [=[
Usage: pflua-compile [-O0] [pipeline] <expression>

Options:
   Pipeline options: --bpf-asm, --bpf-lua, --lua, --match, --parse, --anf, --ssa
   --bpf-asm   Print libpcap-generated BPF asm code for <pflang-expression>
   --bpf-lua   Print Lua code compiled from BPF for <pflang-expression>
   --lua       Print Lua code compiled directly for <pflang-expression> (DEFAULT)

   --match     Print Lua code compiled from the pfmatch <match-expression>
               Example match-expression: 'match {tcp => drop}'

   --ast       Emit the abstract syntax tree for <pflang-expression>
   --anf       Emit the A-Normal Form IR for <pflang-expression>
   --ssa       Emit the Single Static Assignment IR for <pflang-expression>

   -O0         Disable optimizations. (Optimizations are on by default) ]=]
   print(content)
   os.exit()
end

-- Print help
if #arg == 0 then
   usage()
end

local flags = utils.set(...)

-- Print help
if flags["--help"] or flags["-h"] then
   usage()
end

-- No code-generation flag defined
if (not(flags["--bpf-asm"] or flags["--bpf-lua"] or flags["--lua"]
        or flags['--match']
        or flags["--ast"] or flags["--anf"] or flags["--ssa"])) then
   -- Default action
   flags["--lua"] = true
end


local optimize = true
if flags["-O0"] then optimize = false end

local filter = arg[#arg]
if flags["--bpf-asm"] then
   print(pf.compile_filter(filter, {libpcap=true, source=true,
                                    optimize=optimize}))
   os.exit(0)
end
if flags["--bpf-lua"] then
   print(pf.compile_filter(filter, {bpf=true, source=true,
                                    optimize=optimize}))
   os.exit(0)
end
if flags["--lua"] then
   print(pf.compile_filter(filter, {source=true, optimize=optimize}))
   os.exit(0)
end
if flags["--match"] then
   print(match.compile(filter, {source=true, optimize=optimize}))
   os.exit(0)
end

local ast = pf.expand.expand(pf.parse.parse(filter), "EN10MB")
if optimize then
   ast = pf.optimize.optimize(ast)
end
if flags["--ast"] then
   utils.pp(ast)
   os.exit(0)
end

local anf_expr = anf.convert_anf(ast, {optimize=optimize})
if flags["--anf"] then
   utils.pp(anf_expr)
   os.exit(0)
end

local ssa_expr = ssa.convert_ssa(anf_expr, {optimize=optimize})
if flags["--ssa"] then
   ssa.print_ssa(ssa_expr)
   os.exit(0)
end
